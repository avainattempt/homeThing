substitutions:
  battery_pin: "34"
sensor:
## Battery
  - platform: adc
    pin: $battery_pin
    attenuation: 12db
    name: "vccadc"
    update_interval: 500ms
    id: vcc_adc
    internal: true
    on_value:
      then:
        lambda: |-
          if (!id(charging)->has_state()) {
              id(charging)->publish_state(false);
          } else if (id(vcc_adc).state > 2.23) {
            if (!id(charging).state) {
              id(charging)->publish_state(true);
            }
          } else {
            if (id(charging).state) {
              id(charging)->publish_state(false);
            }
          }
          id(vcc_adc_avg).publish_state(id(vcc_adc).state);
  - platform: template
    id: vcc_adc_avg
    filters:
      - sliding_window_moving_average:
          window_size: 4
          send_every: 4
    on_value :
      then:
        - sensor.template.publish:
            id: batteryVoltage
            state: !lambda 'return id(vcc_adc).state;'
  - platform: template
    name: batteryVoltage
    id: batteryVoltage
    internal: true
    unit_of_measurement: 'V'
    on_value :
      then:
        - sensor.template.publish:
            id: battery_percent
            state: !lambda 'return (id(batteryVoltage).state * 118) - 162;'
  - platform: template
    name: "${friendly_name} Battery Percent Internal"
    id: battery_percent
    internal: true
    unit_of_measurement: '%'
    on_value_range:
      below: 7
      then:
        lambda: |-
          ESP_LOGE("SLEEP", "Low Power Supply %.3fV! Sleeping to protect battery", id(battery_percent).state);
          id(sleep_toggle).turn_on();
  - platform: template
    name: "${friendly_name} Battery Percent"
    id: battery_percent_public
    unit_of_measurement: '%'
    update_interval: 10s
    lambda: |-
      return id(battery_percent).state;

binary_sensor:
  - platform: template
    id: charging